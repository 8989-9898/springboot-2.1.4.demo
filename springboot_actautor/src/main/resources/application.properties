# 通过访问  http://localhost:8080/actuator/info  查看详细信息
# 描述信息
info.blog-url=http://spring-boot-actautor.com
info.author=java-learn
info.versoin=@project.version@
info.name=@project.artifactId@

# 加载所有端点/默认只加载了 info和health
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# 关闭特定的端点
management.endpoint.shutdown.enabled=false

# 映射路径，将health端点的路径映射为myhealth。也可以改变其它的端点
management.endpoints.web.path-mapping.health=myhealth

## 使用actautor 的健康检查和监测不是很方便，应为需要一个一个的接口调用，没有可视化的界面控制
# 使用可视化的界面控制和监控 spring-boot-amdin-server|client|ui  这三个包解决

# 选择激活的环境，如果是 dev 环境就不需摇验证，而 prod 环境就需要验证
spring.profiles.active=prod

# 默认使用的是actautor spring-boot-admin扫描不到，需要修改为 /
management.endpoints.web.base-path=/

# 日志文件路径
logging.file=./@artifactId@/logs/admin-server.log

# 客户端访问的路径
# 使用 ${}获取配置信息的时候，获取的配置必须写明，不然没有用去
spring.boot.admin.client.url=http://localhost:${server.port}
server.port=8080
# 不配置就使用主机名
spring.boot.admin.client.instance.prefer-ip=true


debug=true

